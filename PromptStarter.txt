I'm making a web app for small fiber neuropathy using Next.js and Tailwind CSS (I used "npx create-next-app@latest sfn-foundation --typescript --tailwind --src-dir --app --import-alias "@/*"" to generate my project), I want it to be as modular as possible. I made a mockup using Figma.

Most AI models struggle with Tailwind V4 because it no longer uses a tailwind.config file and you do all theme styles in globals.css now using @theme. Theme variables are special CSS variables defined using the @theme directive that influence which utility classes exist in your project.

For example, you can add a new color to your project by defining a theme variable like --color-mint-500:
app.css

@import "tailwindcss";@theme {  --color-mint-500: oklch(0.72 0.11 178);}

Now you can use utility classes like bg-mint-500, text-mint-500, or fill-mint-500 in your HTML:

<div class="bg-mint-500">  <!-- ... --></div> Always refer to globals.css for my project when needing global variables.

I am using multiples of 8 for spacing, padding, and rounded corners so like 24 px rounded corners is standard, 40px gap between FAQ accordions etc. I am using Public Sans font for all text. I made a variable .container-padding in globals.css to apply to content to match the Figma layout it can be used like container-padding

The ultimate goal of this website is to provide people with small fiber neuropathy information in an accessible way and provide hope. We will use this web app to eventually have another part of it to allow authorized users to upload latest small fiber neuropathy research that will be stripped to a format that is easiest for a LLM AI to use to find a cure.

My globals.css file is setup like this:
@import "tailwindcss";

html {
  scroll-behavior: smooth;
}

/* ===== Theme Variables ===== */
@theme {
  /* Colors */
  --color-primary: #5159CF;
  --color-secondary: #009CFA;
  --color-white: #FBF8F8;
  --color-offWhite: #EFEEF5;
  --color-black: #373847;
  --color-dark: #54566E;
  --color-gray: #5B5D70;

  /* Fonts */
  --font-sans: 'Lato', sans-serif;
  --font-serif: 'Lora', serif;

  /* Spacing */
  --spacing-section: 5rem;

  /* Border Radius */
  --radius-card: 0.75rem;
  --radius-btn: 0.5rem;

  /* Shadows */
  --shadow-header: 0 4px 12px 6px rgba(33, 26, 63, 0.025);

  /* Animations */
  --animate-slideDown: slideDown 150ms cubic-bezier(0.87, 0, 0.13, 1);
  --animate-slideUp: slideUp 150ms cubic-bezier(0.87, 0, 0.13, 1);

  /* Miscellaneous */
  --header-height: 137px;
}


/* ===== Base Styles ===== */
@layer base {
  body {
    @apply font-sans text-dark bg-offWhite;
  }
  h1, h2, h3, h4, h5, h6 {
    @apply font-sans font-bold;
  }
}

/* ===== Utilities ===== */
@layer utilities {
  .container-padding {
    max-width: 80rem;
    padding-left: 2rem;
    padding-right: 2rem;
  }

  /* Mobile/tablet overrides */
  @media (max-width: 1024px) {
    .container-padding {
      padding-left: 2rem;
      padding-right: 2rem;
    }
  }

  @media (max-width: 640px) {
    .container-padding {
      padding-left: 2rem;
      padding-right: 2rem;
    }
  }

  .hero-gradient {
    background: linear-gradient(
      180deg,
      color(var(--color-hero-from) / 0.92) 0%,
      color(var(--color-hero-mid)  / 0.82) 48%,
      color(var(--color-hero-to)   / 0.92) 100%
    );
  }

  /* Animation Utilities */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-5px); }
    to { opacity: 1; transform: translateY(0); }
  }
  .animate-fadeIn {
    animation: fadeIn 0.2s ease-in-out;
  }

  @keyframes fadeSlideIn {
    from { opacity: 0; transform: translateX(24px); }
    to { opacity: 1; transform: translateX(0); }
  }
  .animate-fadeSlideIn {
    animation: fadeSlideIn 0.2s ease-out;
  }

@keyframes slideDown {
  from {
    opacity: 0;
    transform: scaleY(0.9);
  }
  to {
    opacity: 1;
    transform: scaleY(1);
  }
}

@keyframes slideUp {
  from {
    opacity: 1;
    transform: scaleY(1);
  }
  to {
    opacity: 0;
    transform: scaleY(0.9);
  }
}
  .animate-slideDown {
    animation: var(--animate-slideDown, slideDown 150ms cubic-bezier(0.87, 0, 0.13, 1)) forwards;
    transform-origin: top;
  }
  .animate-slideUp {
    animation: var(--animate-slideUp, slideUp 150ms cubic-bezier(0.87, 0, 0.13, 1)) forwards;
    transform-origin: top;
  }
}
