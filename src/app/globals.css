@import "tailwindcss";

html {
  scroll-behavior: smooth;
}

/* ===== Theme Variables ===== */
@theme {
  /* Colors */
  --color-primary: #5159CF;
  --color-secondary: #009CFA;
  --color-tertiary: #4bbea0;
  --color-white: #FBF8F8;
  --color-offWhite: #EFEEF5;
  --color-black: #373847;
  --color-dark: #54566E;
  --color-gray: #5B5D70;
  --color-warning: #ff8b6e;
  --color-error: #ff5d95;

  /* Fonts */
  --font-sans: 'Lato', sans-serif;
  --font-serif: 'Lora', serif;

  /* Spacing */
  --spacing-section: 5rem;

  /* Border Radius */
  --radius-card: 0.75rem;
  --radius-btn: 0.5rem;

  /* Shadows */
  --shadow-header: 0 4px 12px 6px rgba(33, 26, 63, 0.025);

  /* Animations */
  --animate-slideDown: slideDown 150ms cubic-bezier(0.87, 0, 0.13, 1);
  --animate-slideUp: slideUp 150ms cubic-bezier(0.87, 0, 0.13, 1);

  /* Miscellaneous */
  --header-height: 200px;

  /* Focus ring defaults */
  --focus-ring-offset: 4px;      /* matches focus-visible:ring-offset-4 */
  --focus-ring-radius: 0.125rem; /* small rounded (tailwind rounded-sm) */
}


/* ===== Base Styles ===== */
@layer base {
  body {
    @apply font-sans text-dark bg-offWhite;
  }
  h1, h2, h3, h4, h5, h6 {
    @apply font-sans font-bold;
  }
  
  /* Text selection styles (global) */
  ::selection {
    background: var(--color-primary);
    color: var(--color-white);
  }
  ::-moz-selection {
    background: var(--color-primary);
    color: var(--color-white);
  }
}

/* Accessible skip link and focus styles */
@layer utilities {
  .skip-link {
    position: absolute;
    left: 2rem;
    top: -60px;
    background: var(--color-primary);
    color: var(--color-white);
    padding: 1rem 2rem;
    border-radius: 16px;
    z-index: 9999;
    transition: top 160ms ease, transform 160ms ease;
  }
  /* only show the skip link visually when it's focus-visible (keyboard navigation)
     programmatic focus (e.g., JS focusing on navigation) will not show the visual
     affordance but the element will still be focused for screen reader/keyboard use */
  .skip-link:focus-visible,
  .skip-link[data-skip-visible="true"] {
    top: 2.5rem;
    transform: translateY(0);
    outline: none;
    box-shadow: 0 0 0 3px rgba(81,89,207,0.18);
  }

  /* Respect user agent focus handling but provide a clear visible focus when keyboard navigating */
  :focus:not(:focus-visible) {
    /* keep visual noise down for mouse interactions */
    outline: none;
  }
  /* Default keyboard focus treatment (uses variables so it's consistent across the app).
     Smaller corner radius (rounded-sm) and natural offset equivalent to ring-offset-4. */
  :focus-visible {
    outline: 3px solid var(--color-primary);
    outline-offset: var(--focus-ring-offset);
    border-radius: var(--focus-ring-radius);
  }

  /* Utility: explicit outline-based focus ring for components that prefer an outline
     (useful as a fallback when ring utilities are clipped by overflow). */
  .focus-ring:focus-visible {
    outline: 3px solid var(--color-primary);
    outline-offset: var(--focus-ring-offset);
    border-radius: var(--focus-ring-radius);
  }

  /* ...existing code... */
}

/* ===== Utilities ===== */
@layer utilities {
  .container-padding {
    max-width: 80rem;
    padding-left: 2rem;
    padding-right: 2rem;
  }

  /* Custom Drop Shadow */
  .default-shadow {
    box-shadow: 0px 4px 8px 0px rgba(98, 109, 251, 0.05);
  }

  .emphasis-shadow {
    box-shadow: 0 6px 18px 0 rgba(81, 89, 207, 0.12);
  }

  .text-shadow-subtle {
    text-shadow: 0 2px 6px rgba(16,24,40,0.16);
  }

  .text-shadow-nearInvisible {
    text-shadow: 0 2px 6px rgba(34, 25, 51, 0.08);
  }

  /* Responsive Scroll Margin */
  @media (min-width: 1025px) {
    [id] {
      scroll-margin-top: calc(var(--header-height) - 40px);
    }
  }

  /* Mobile/tablet overrides */
  @media (max-width: 1024px) {
    .container-padding {
      padding-left: 2rem;
      padding-right: 2rem;
    }
  }

  @media (max-width: 640px) {
    .container-padding {
      padding-left: 1rem;
      padding-right: 1rem;
    }
  }

  .hero-gradient {
    background: linear-gradient(
      180deg,
      color(var(--color-hero-from) / 0.92) 0%,
      color(var(--color-hero-mid)  / 0.82) 48%,
      color(var(--color-hero-to)   / 0.92) 100%
    );
  }

  /* Animation Utilities */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-5px); }
    to { opacity: 1; transform: translateY(0); }
  }
  .animate-fadeIn {
    animation: fadeIn 0.2s ease-in-out;
  }

  @keyframes fadeSlideIn {
    from { opacity: 0; transform: translateX(24px); }
    to { opacity: 1; transform: translateX(0); }
  }
  .animate-fadeSlideIn {
    animation: fadeSlideIn 0.2s ease-out;
  }

@keyframes slideDown {
  from {
    opacity: 0;
    transform: scaleY(0.9);
  }
  to {
    opacity: 1;
    transform: scaleY(1);
  }
}

@keyframes slideUp {
  from {
    opacity: 1;
    transform: scaleY(1);
  }
  to {
    opacity: 0;
    transform: scaleY(0.9);
  }
}
  .animate-slideDown {
    animation: var(--animate-slideDown, slideDown 150ms cubic-bezier(0.87, 0, 0.13, 1)) forwards;
    transform-origin: top;
  }
  .animate-slideUp {
    animation: var(--animate-slideUp, slideUp 150ms cubic-bezier(0.87, 0, 0.13, 1)) forwards;
    transform-origin: top;
  }

  .hover-scale {
    transform-origin: center;
    transition: transform 160ms ease;
    will-change: transform;
  }
  .hover-scale:hover {
    transform: scale(1.05);
  }

}

/* Accordion: show focus outline only when focused via keyboard (not pointer clicks)
   - JS marks pointer activations with data-pointer-activated which is removed shortly after.
   - Keyboard focus (focus-within) without that attribute shows a clear primary outline. */
[data-accordion-item]:focus-within:not([data-pointer-activated]) {
  outline: 3px solid var(--color-primary);
  outline-offset: 6px;
  border-radius: var(--radius-card);
  /* subtle shadow to match other focus treatments */
  box-shadow: 0 6px 18px rgba(81, 89, 207, 0.08);
}

/* When an accordion item was activated by a pointer (mouse/touch), hide the
   keyboard-only focus treatment for any focused element inside the item so
   clicks/taps don't show the keyboard ring. Keep the focus for semantics,
   but visually suppress the outline until keyboard navigation resumes. */
[data-accordion-item][data-pointer-activated] :is(:focus, :focus-visible, *:focus, *:focus-visible) {
  outline: none !important;
  box-shadow: none !important;
}

/* Also ensure the accordion item element itself does not show the keyboard outline
   when it was recently activated by pointer. Some browsers place the focus
   outline on the ancestor element, so suppress it here as well. */
[data-accordion-item][data-pointer-activated] {
  outline: none !important;
  box-shadow: none !important;
}
